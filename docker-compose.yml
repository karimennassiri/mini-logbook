services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx:/etc/nginx/conf.d
      - ./api:/var/www
      - ./front:/app
    depends_on:
      - api
      - frontend
    networks:
      - network

  db:
    image: mysql:8.0
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: laravel
      MYSQL_USER: laravel
      MYSQL_PASSWORD: laravel
    ports:
      - "3306:3306"
    volumes:
      - ./docker/mysql:/var/lib/mysql
    networks:
      - network

  api:
    build:
      context: ./api
    container_name: api
    volumes:
      - ./api:/var/www
      - vendor:/var/www/vendor
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: laravel
      DB_USERNAME: laravel
      DB_PASSWORD: laravel
    command: > # This command could be improved by checking if the database container is up or not before running any migration command
      sh -c "
        php artisan migrate;
        php artisan serve --host=0.0.0.0 --port=8000
      "
    networks:
      - network

  frontend:
    build:
      context: ./front
    container_name: front
    ports:
      - "5173:5173"
    depends_on:
      - api
    volumes:
      - ./front:/app
      - node_modules:/app/node_modules
    networks:
      - network
      
volumes:
  node_modules: {}
  vendor: {}

networks:
  network:
    driver: bridge